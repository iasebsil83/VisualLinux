t0 Visual Linux






t1 Overview

p \iVisual Linux\i is a graphical simulation application showing how the Linux kernel execution works. \
This simulator includes memory usage in CPU cache, control flow between user and kernel code, exception handling and more.
b



t2 Disclaimer on exactness

p This application shows \ba \cff0000simplified\c representation\b of the Linux kernel mechanisms. \
These are not exactly what the Linux kernel code does. \
The CPU instruction set is completely fictive as well as the long term storage use. \
We mostly concentrates on execution & short term memory management between kernel and user "code".

p Also, for more simplicity, CPU is the only interface with hardware in this simulation program. \
Operations such as printing text or accessing to long term storage are assumed by the CPU instead of using other devices. \
Another thing that you might find weird in this implementation is that we only use one type of memory block : words of 2 bytes (16b). \
This has also been made to simplify representations and reduce display information.

l This project has been made for educational purpose only.



t2 How does it work

p To simulate kernel loading and boot sequence, \iVisualLinux\i will require to have a kind of "hard drive" \
represented by a directory given when executing the program. \
In this directory, a file \mkernel.hc\m must exist. \
It is the main program (and also the first one) that will be executed.

p Other programs which are \buser\b programs can be executed afterwards. \
When the (virtual) kernel will access to its "long term storage" to load a user program, it will look in that same storage directory \
for the corresponding \m.uc\m file to load. \
Therefore, you are completely free to create as much user programs as you want. \
Note that the file is written under an "UC" syntax : \
this action is similar to writting directly compiled ELF code onto disk so a specific synatx must be respected.

p The syntaxes used in that project are very specific (and simplified to be understood). \
Full descriptions are available below but you may not need to learn them to use \i\i at first. \
Infact, before trying to do things yourself, some examples have already been made ready-to-use in the \mstorage/\m directory. \
You better run them first and then, if curious, dig into the code to make yours.






t1 Use

t2 Requirements

l This program has been made to run on GNU/Linux operating systems.

p If you already have the compiled \iVisualLinux\i application on your computer, nothing else is required. \
However, to compile this project you will require package \mfreeglut3-dev\m.
" bash
sudo apt install freeglut3-dev #on apt based distros
"



t2 Compile & Run

l To compile \iVisual Linux\i :
" bash
bld/build
"
l The resulted application should be available under \mapp/VisualLinux\m.

l To execute \iVisual Linux\i :
" bash
app/VisualLinux <storage_dir> #example: "app/VisualLinux storage/example1/"
"
l Enjoy using the examples given in the \mstorage/\m directory.

l The next chapter is about how to make your own kernel and user codes yourself, so you can skip it if not interrested.




t1 We need to go deeper

t2 HC and UC

p As said before, the CPU instruction set is completely custom. \
As the CPU is the only interface we use for hardware interactions, I invented the \bHC\b syntax (= "Hardware Code") for the occasion \
which is nothing more than CPU instructions directly written in a file, under a "binary" format. \
This syntax is highly restrictive making things easy for our "virtual CPU" to operate but quite hard to write programs manually.

p For this reason, I also decided to make a \b\uUser Code\u\b syntax (= \bUC\b files), more textual and less restrictive. \
This format cannot be used as is to be loaded into virtual computer RAM, we must compile it into HC format before use. \
This can be done using the \mUC2HC\m compilator given alongside the main application :
" bash
app/UC2HC <mode> path/to/my/program.uc #will produce path/to/my/program.hc
"
p The \m<mode>\m argument you see here \umust be given\u to indicate whether your code must be compiled in \buser\b or \bkernel\b mode. \
It only consist in a single character \mu\m or \mk\m.

l I will now give some explanations on how those syntaxes work.



t2 UC in details

p An UC file is read line by line, each line \upotentially\u corresponding to an HC instruction. \
We determine which type of instruction we have by reading the first character of the line : the \uidentifier\u. \
Then, the rest of the line will be analysed depending on the type of instruction we have. \
Mind that a space separator is always required after the identifier for better visualisation of the code.

p Also for better code understanding, it is possible to have empty lines and comments. \
Empty lines are simply ignored and lines with a semicolon identifier \m;\m will be considered as a comment so also completely ignored as well. \
Examples of some UC codes are given in the \mstorage/\m directory of the project, you can check them out to have a first overview of the thing.


t3 UC : Data Items

p As I said, each UC instruction has its own specificity. \
Let's first start by the simplest one : \uDATA ITEMS\u. \
Those instructions begin with the \mD\m identifier and it allows you to store static data fields in your program such as string constants or numbers.

p A data item requires 2 parameters separated by a space character : the VALUE to store and its corresponding DATA SYMBOL NAME (name). \
The first parameter can be of 2 type : a \b\uw\u\bord or a string. \
This is determined by the first character of the first parameter, the rest of it will be interpreted as the value itself. \
Then, the second parameter gives a data symbol name that can be used anywhere in the code to target that value :
"
; word data item with given name MY_DATA_ITEM corresponding to value 0x02d5 (hexadecimal)
D w02d5 MY_DATA_ITEM

; string data item TITLE_STRING with a string value given
D "This is a text sequence that can have a variable amount of characters" TITLE_STRING

; another string data item with escaped sequences
D "You can call me \"I.A.\" using backslashes '\\' characters" demonstration_string
"
p You see here that \b\uw\u\bord data items \u\cff0000must\c\u be expressed under 4 hexadecimal digits. \
Strings can be anything as long as it ends with an non-escaped string terminator \m"\m. \
Data item names must be only made of characters (lowercase & uppercase) and underscores.

p Note that a terminator character will be added to the string when stored into HC file or when loaded in memory at runtime. \
Also, unlike regular "variables" that we can see in lots of programming languages, \
data items here can be used / called / referenced (use the term you want) at any location in the code. \
Those elements are \ustatic\u data that are accessible from the beginning of the code to the very end \
(considering that your kernel does respect your user space).

p For more information about how those data items can be used at runtime (addresses, read / write / execute permissions...), \
please check out the next chapter about the HC syntax. \
You should easilly guess what can or cannot be done with it.


t3 UC : Labels & Jumps

p One \ureally\u helpful UC & HC instruction is the \b\uJ\u\bump, identified by the \mJ\m character. \
This allows you to jump to a specific location in the code. \
The instruction takes only one parameter starting with a type prefix \mv\m, \mr\m, \ml\m and \md\m standing for "value", "register", "label" and "data item".

p Jumping to a value is the simplest one : the four next characters in our parameter must be hexadecimal digits \
that corresponds to the location to go to relatively to the current position. \
For register jumping, the principle is the same except that the four digits now refers to the current CPU register with that ID \
so we will jump according to the value stored to that register. \
The jump is still made relatively to the current execution position.
"
; Some instructions
# instruction1
# instruction2
# instruction3
# instruction4

; jumping back to instruction3 (fffe = -2)
J vfffe

; same example using registers, considering that register R3 currently has value fffd (= -3) stored
J r0003
"
p This seems to be useful sometimes but in practice, it is easy to make mistakes espacially when using value jumping. \
Counting instruction indexes is not that simple. \
At runtime and you may have surprises because the number of instructions you counted was not good in the resulting HC code.

p The thing is that jumps must be done over a number of \b\uHC\u\b instructions and not over a number of \b\uUC\u\b instructions. \
Indeed, some UC instructions such as Data Items or Labels does \u\cff0000not\c\u produce HC instructions at all. \
A fair and secure way to use jumps in UC is to use register parameter when having previously stored in it the current execution position \
(in order to get back when we left) or use label jumping (that we will see now).

p As we said, another way to jump to somewhere interesting in our program is using labels. \
Labels are fictive locations not appearing in the resulting HC code that targets a specific location in the code. \
These are UC instructions with the identifier \mL\m that only takes in parameter a label name :
"
l my_first_custom_label
# ins1
# ins2
# ins3

l my_second_custom_label
# ins4
# ins5
"
p Label names have the same rules as data item names. \
A jump to a given label only consist of giving the name of the label to go to. \
In the resulting HC code, this instruction will be replaced by a value jump with the correct amount of lines automatically computed.
"
l my_custom_label
# ins1
# ins2
# ins3

; go back to ins1
jmp lmy_custom_label
"
p The last thing we did not cover is the data item jumping (using the \md\m prefix). \
This one is nothing more than a shortcut to make a value jump using the value stored in a static data item. \
The parameter must contain the name of the data item to target and the value will be set into at compile time.

p At first sight, we could think about "value" jumps as a useful way to get outside the user code \
such as using specific kernel locations for syscalls... \
This may not be that simple. \
Keep in mind that jumps are \bALWAYS\b made \urelatively\u to the current position. \
Depending on where your kernel will load your program in RAM, you may not be able to know where to jump to reach that special location. \
However, by using some smart mechanisms, this can be done in various ways such as in the examples given.


t3 UC : Add / Multiply

p Additions and multiplications are associated to identifiers \mA\m and \mX\m. \
They requires one parameter that will be the \u\bsecond\b\u operand of the calculation. \
The first operand is taken from register \mR0000\m and result will then be stored in that same register.

p As parameter, we can use both use \uvalue\u (\mv\m), \uregister\u (\mr\m) or \udata item\u (\md\m) prefixes. \
Note that in the last 2 cases, the parameter value will serve as address to take value from RAM.
"
; R0 + R3 => R0
A r0003

; THIS IS NOT "R0 * 2 => R0", BUT RATHER "R0 * value@adress[2] => R0"
X v0002

; If you want to use constant values, use static data items.
; This does the job "R0 * 2 => R0" :
D w0002 cst1
X dcst1
"


t3 UC : Read / Write with R0000

p One really useful thing we can do in UC/HC is use the main temporary register R0000. \
There are 2 UC instructions (and their HC equivalent) that allows you to read and write from/to R0000. \
They have identifiers \mR\m and \mW\m respectively for \ureading\u and \uwriting\u into that register.

p In both operations, you can either target a RAM element or one of the current registers. \
As for additions and multplications, prefixes \mv\m, \mr\m and \md\m are allowed. \
Same behavior for the 2 last cases.
"
; write R0 into R1
W r0001

; THIS IS NOT "5 => R0", BUT RATHER "value@adress[5] => R0"
R v0005

; If you want to use constant values, use static data items.
; This does the job "5 => R0" :
D w0005 cst1
R dcst1
"


t3 UC : Load from storage

p . \
Identifier for this instruction is \mB\m (stands for "Binary load").

p In both operations, you can either target a RAM element or one of the current registers. \
As for additions and multplications, prefixes \mv\m, \mr\m and \md\m are allowed. \
Same behavior for the 2 last cases.
"
; load myProgram from storage
D "myProgram" programName
B dprogramName
"


t3 UC : Print

p This may be the simplest instruction in both UC & HC syntaxes, identified by character \mP\m here. \
As most of the previous ones, it only requires one parameter that is the address in RAM of the text string to be printed on screen. \
Text string will be read from RAM until a string terminator character is found (hexdecimal \m0x00\m value).

p The address of that string can be given in 3 different ways : \
using \uvalue\u referencing \mv\m (not recommended except for system kernel-defined global strings), \
\uregister\u referencing \mr\m (address taken from register value), \
or \udata item\u referencing \md\m (value will correspond to a static value given in a data item) :
"
; Print string at address currently stored in R0
P r0000

; Define some kernel-specific constants
D w0321 syscall_error_text
D w035a IO_error_text

; Print string at address given in static data item "syscall_error_text"
P dsyscall_error_text
"

p Here it is for the UC syntax and its instructions implemented yet. \
The next section will focus on HC instructions and how this computer virtualisation works toward them.


t3 UC : Additionnal features

p One pretty useful thing in the UC syntax is the use of the special value \m%%%%\m. \
It refers to the current HC instruction index in your code. \
Obviously, this field will be replaced at compile time. \
This can be used as a way to do stuff outside of your current program scope for example.



t2 HC in details

p As we said earlier, HC is a binary syntax that makes execution really easy for our virtual computer. \
Also, as for the majority of binary file formats that concerns execution, HC is composed of sections. \
We have 3 sections (that must be given in that order) : \
First, the DATA JUMPER section, then the DATA section and finally the EXECUTION section.

p You may have guessed we will have to manage some data elements before the real code execution. \
This DATA section is preceeded by its JUMPER that is nothing more than a JUMP HC instruction \
that goes over the DATA section to directly reach our program code. \
Therefore, this JUMPER is quite simple, nothing to say about it except that it holds the size of the DATA section...

p The DATA section however is more interesting because it contains every element we declared in our UC code using the \mD\m identifier (data items). \
Those elements are \u\bstatic\b\u and have no access restriction (read/write/execute). \
Also, as said before in UC instructions, static data items are accessible from anywhere in the program. \
Actually, they are part of the program itself. \
The data section is nothing more than each data item declared stored one after another. \
Strings have an additionnal 0 terminator byte added as end delimiter.

p Then, directly after that data section you will find the EXECUTION section. \
This consists in a list of instructions, each composed of 4 bytes (32 bits), that is 2 words in our virtual computer. \
Each instruction is composed of some identification information (header) and a value parameter. \
Here is what is inside an HC instruction exactly :

p The first bit is the \umode\u of that instruction, 0:user, 1:kernel. \
Then, the 2 next bits gives the information whether the following parameter will concern \
a literal value (00), target a register (01), or a RAM address (10, last value 11 is not used). \
The next 13 bits are used to give the instruction ID (explained a few paragraphs below). \
Finally, as you might have guessed, the remaining 16 bits forms the parameter value to be used with that instruction.

p There is no separator between HC instructions. \
Except when jumping to a specific location, the virtual computer will always jump by steps of 4 bytes after each instruction. \
Here is the list of all HC instruction IDs with their explanation :
- ID:0, \uAddition\u
Perform an \bAddition\b between registers R0000 and given parameter and write result into R0000. \
If parameter is a value (not register), use it as an address to get value from RAM.
-
- ID:1, \uMultiplication\u
Perform a \bMultiplication\b between registers R0000 and given parameter and write result into R0000. \
If parameter is a value (not register), use it as an address to get value from RAM.
-
- ID:2, \uPrint\u
\bPrint\b onto virtual screen the 0-terminated string in RAM at the address given as parameter. \
If parameter is a register, use the value stored in that register as RAM address.
-
- ID:3, \uJump\u
\bJump\b to the number of instructions given instead of just one. \
Signed values can be used to jump backwards a certain number.
-
- ID:4, \uInput\u to current stack
\bInput\b the given value to current stack.
-
- ID:5, \uOutput\u to current stack
\bOutput\b the last value from current stack into the given destination. \
If parameter is a value (not register), use it as address to store result into memory.
-
- ID:6, \uRead\u something to store in R0000
\bRead\b value from given parameter and store it into R0000. \
If parameter is a register, read value from it, else, use it as an address in memory to read from. \
One full word will be read (2 bytes).
-
- ID:7, \uWrite\u R0000 somewhere
\bWrite\b value from register R0000 into the given destination. \
If parameter is a register, store in targetted register, else use it as an address to store into memory. \
Using this instruction with parameter R0000 is possible (but useless).
-
- ID:8, \uLoad\u from storage
\bL\boad an external HC program into RAM at the address (offset) given as parameter. \
The filename of the program to load will be taken from RAM at the address set in R000 and must be 0-terminated.
-
- ID:9, \uZero\u
Fill the given number of words in RAM with \bZ\beros starting from the address stored in R0000.
-
- ID:10, \uChange\u CPU Memory
\bC\bhange CPU memory to the given index.
-
- ID:11, \uGet\u program counter
\bG\bet program counter at current position and store it into given destination. \
If parameter is a value (not register), use it as address to store result into memory.
-
- ID:12, \uSubtraction\u
Perform a \bSubtraction\b between registers R0000 and given parameter and write result into R0000. \
If parameter is a value (not register), use it as an address to get value from RAM.
-
- ID:13, \uDivision\u
Perform a \bDivision\b between registers R0000 and given parameter and write result into R0000. \
If parameter is a value (not register), use it as an address to get value from RAM.
-


t2 Producing kernel code

p As said before, the kernel code is the main and first program that will be used in our computer (simulator). \
The thing is that we can't use UC syntax to load it (can't load himself since he is not here). \
So we must have an "already loaded" HC syntax to give to \iVisualLinux\i so that it can barely execute the kernel code without operating anything else.

p The thing is that the kernel code is not that simple to write and can be pretty big \
so writing it directly in HC syntax becomes quickly unfair and unmaintainable. \
For this reason, when compiling \iVisualLinux\i, another program is produced alongside the main application : \mUC2kHC\m. \
This program allows you to compile a UC file into an HC one as a "regular" kernel will have done, \
\cff0000\bexcept that\b\c resulted instruction will not be set in "user" mode but in "kernel" mode.

p Here is an example of how to produce its own kernel code :
" bash
#write my own kernel in regular UC
mkdir storage/myCustomOS
nano  storage/myCustomOS/kernel.uc

#compile it into HC with kernel mode: 'k'
app/UC2HC k storage/myCustomOS/kernel.uc > storage/myCustomOS/kernel.hc

#use the generated "kernel.hc" file
app/VisualLinux storage/myCustomOS
"
l There you go !

b

l You should have everything you need to work with \iVisual Linux\i, enjoy !

b
b

l Contact    : \li.a.sebsil83@gmail.com\l\l
l Youtube    : \lhttps://www.youtube.com/user/IAsebsil83\l\l
l Repository : \lhttps://github.com/iasebsil83\l\l

l Let's Code !\arBy I.A.
